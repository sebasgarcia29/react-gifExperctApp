{"version":3,"sources":["components/AddCategory.js","helpers/getGif.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cate","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","answer","json","data","gifs","map","id","title","image","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","usefetchGifs","img","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"qMAIaA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACZC,mBAAS,IADG,mBACzCC,EADyC,KAC7BC,EAD6B,KAehD,OACE,sBAAMC,SATa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,OACtCN,EAAc,MAKhB,SACE,uBACEO,KAAK,OACLC,MAAOT,EACPU,SAjBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,a,+BCNdG,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEAI,MAAMF,GAFN,cAEfG,EAFe,gBAGEA,EAAOC,OAHT,uBAGbC,EAHa,EAGbA,KACFC,EAAOD,EAAKE,KAAI,SAACR,GACrB,MAAO,CACLS,GAAIT,EAAES,GACNC,MAAOV,EAAEU,MACTC,MAAOX,EAAEY,OAAOC,iBAChBZ,IAAKD,EAAEY,OAAOC,iBAAiBZ,QATd,kBAadM,GAbc,4CAAH,sDCAPO,EAAc,SAAC,GAAwB,IAAtBL,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IACvC,OACE,sBAAKc,UAAW,0BAAhB,UACE,qBAAKC,IAAKf,EAAKgB,IAAKP,IACpB,8BAAIA,EAAJ,YAF8CD,ICCvCS,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECDb,SAACA,GAAa,MAGdd,mBAAS,CAAEqB,KAAM,GAAIa,SAAS,IAHhB,mBAGjCC,EAHiC,KAG1BC,EAH0B,KAYxC,OAPAC,qBAAU,WACRxB,EAAQC,GACLwB,MAAK,SAAAC,GACJH,EAAS,CAAEf,KAAMkB,EAAML,SAAS,SAEnC,CAACpB,IAEGqB,EDT2BK,CAAa1B,GAAjCa,EAFyB,EAE/BN,KAAca,EAFiB,EAEjBA,QAEtB,OACE,qCACE,oBAAIJ,UAAW,oCAAf,SAAqDhB,IACpDoB,GAAW,wCACZ,qBAAKJ,UAAW,YAAhB,SAEIH,EAAOJ,KAAI,SAAAkB,GAAG,OACZ,cAAC,EAAD,eAEMA,GADCA,EAAIjB,aEbVkB,EAAe,WAAO,IAAD,EACI1C,mBAAS,CAAC,WADd,mBACzB2C,EADyB,KACb5C,EADa,KAGhC,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAEA,6BAEI4C,EAAWpB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CACEA,SAAUA,GACLA,Y,MCbnB8B,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.51313353.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\n\nexport const AddCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  const handleInputChange = (e) => {\n    setInputValue(e.target.value);\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (inputValue.trim().length > 2) {\n      setCategories(cate => [inputValue, ...cate, ]);\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        value={inputValue}\n        onChange={handleInputChange}\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\n","\n\nexport const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=YuoBBzdt6J9HyHigt0h9kPuBVLIStVdE`;\n  const answer = await fetch(url);\n  const { data } = await answer.json();\n  const gifs = data.map((a) => {\n    return {\n      id: a.id,\n      title: a.title,\n      image: a.images.downsized_medium,\n      url: a.images.downsized_medium.url\n    }\n  });\n\n  return gifs;\n}\n\n","import React from 'react'\n\nexport const GifGridItem = ({ id, title, url }) => {\n  return (\n    <div className={'card animate__heartBeat'} key={id}>\n      <img src={url} alt={title} />\n      <p>{title}    </p>\n    </div>\n  )\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { usefetchGifs } from '../hooks/useFetchGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const { data: images, loading } = usefetchGifs(category);\n\n  return (\n    <>\n      <h3 className={'animate__animated animate__bounce'}>{category}</h3>\n      {loading && <p>Loading</p>}\n      <div className={'card-grid'}>\n        {\n          images.map(img =>\n            <GifGridItem\n              key={img.id}\n              {...img}\n            />\n          )\n        }\n      </div>\n    </>\n\n  )\n}\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n}\n","import { useState, useEffect } from 'react';\nimport { getGifs } from '../helpers/getGif';\n\n\nexport const usefetchGifs = (category) => {\n\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  const [state, setstate] = useState({ data: [], loading: true });\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  useEffect(() => {\n    getGifs(category)\n      .then(imgs => {\n        setstate({ data: imgs, loading: false })\n      })\n  }, [category]);\n\n  return state;\n}","import React, { useState } from 'react'\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nexport const GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Naruto']);\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n\n      <ol>\n        {\n          categories.map(category =>\n            <GifGrid\n              category={category}\n              key={category}\n            />\n          )\n        }\n      </ol>\n\n\n    </>\n  )\n}\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}